<div
    class="container mx-auto p-4 max-w-4xl text-lg flex flex-col h-screen"
    hx-ext="ws"
    ws-connect="/ws/chat/{{.ConversationId}}"
    id="chat-socket"
    x-data="{}"
>
    <div id="content" class="flex-grow">
        <!-- Chat messages will be displayed here -->
        {{ range.Messages }}
        {{ . }}
        {{ end }}
    </div>

    <!-- prevent adding a newline when pressing enter by x-data and x-on. note that we also trigger by load but catch empty
    prompts in the backend part -->
    <textarea
        x-data="{ 
            resize () { 
                $el.style.height = '0px'; 
                $el.style.height = $el.scrollHeight + 'px' 
            } 
        }"
        x-init="resize()"
        @input="resize()"
        ws-send
        x-on:keydown.enter.prevent
        hx-trigger="load, keydown[keyCode==13] from:body"
        name="message"
        id="user-message"
        class="w-full display-block leading-8 p-4 mt-4 rounded-xl white bg-gray-900 border border-gray-700 resize-none overflow-hidden"
        placeholder="Message GPT..."
        style="min-height: 4rem"
        >{{.UserMessage}}</textarea
    >

    <div class="text-sm pt-4 text-gray-500">
        Don't blindly trust the LLM. Use at your own risk. We don't secure you
        against XSS or other attacks on purpose, as that would mean censored
        output.
    </div>

    <div class="mx-auto max-w-4xl mb-8 text-xs">Model: {{.Model}}</div>
</div>

<script>
    htmx.on("htmx:wsAfterSend", function (evt) {
        const textarea = document.getElementById("user-message");
        textarea.value = "";
        textarea.focus();
        textarea.selectionEnd = 0;
    });

    htmx.on("htmx:wsError", function (evt) {
        evt.preventDefault();
        console.log("error", evt);
    });

    htmx.on("htmx:wsAfterMessage", function (evt) {
        const elt = document.getElementById("user-message");
        if (elt.getBoundingClientRect().bottom + 20 > window.innerHeight) {
            window.scrollTo({
                top: elt.getBoundingClientRect().bottom + window.scrollY + 20,
                behavior: "smooth",
            });
        }
    });

    document.addEventListener("DOMContentLoaded", () => {
        const targetNode = document.getElementById("content");

        // Options for the observer (which mutations to observe)
        const config = { childList: true, subtree: true, characterData: true };

        // Callback function to execute when mutations are observed
        const callback = (mutationsList) => {
            for (mutation of mutationsList) {
                hljs.highlightAll();
            }
        };

        // Create an observer instance linked to the callback function
        const observer = new MutationObserver(callback);

        // Start observing the target node for configured mutations
        observer.observe(targetNode, config);

        // Later, you can stop observing
        // observer.disconnect();
    });
</script>
